From 022979be67b813a6b9fbc570c2ec2a5bd2cc656f Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Thu, 21 Nov 2024 13:55:55 +0100
Subject: [PATCH] net/mvpp2: fix musdk api rate_limit params

Marvell musdk per SDK12.24.10 has rate limiting parameters nsted by an
additional level into its own structure.
Update accesses accordingly to fix the build.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 drivers/net/mvpp2/mrvl_qos.c |  8 ++++----
 drivers/net/mvpp2/mrvl_tm.c  | 24 ++++++++++++------------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/net/mvpp2/mrvl_qos.c b/drivers/net/mvpp2/mrvl_qos.c
index f43217bc58..f91b8d601f 100644
--- a/drivers/net/mvpp2/mrvl_qos.c
+++ b/drivers/net/mvpp2/mrvl_qos.c
@@ -1141,9 +1141,9 @@ mrvl_configure_txqs(struct mrvl_priv *priv, uint16_t portid,
 	if (mrvl_cfg == NULL)
 		return 0;
 
-	priv->ppio_params.rate_limit_enable = port_cfg->rate_limit_enable;
+	priv->ppio_params.rate_limit.rate_limit_enable = port_cfg->rate_limit_enable;
 	if (port_cfg->rate_limit_enable)
-		priv->ppio_params.rate_limit_params =
+		priv->ppio_params.rate_limit.rate_limit_params =
 			port_cfg->rate_limit_params;
 
 	for (i = 0; i < max_queues; i++) {
@@ -1152,8 +1152,8 @@ mrvl_configure_txqs(struct mrvl_priv *priv, uint16_t portid,
 
 		params->sched_mode = port_cfg->outq[i].sched_mode;
 		params->weight = port_cfg->outq[i].weight;
-		params->rate_limit_enable = port_cfg->outq[i].rate_limit_enable;
-		params->rate_limit_params = port_cfg->outq[i].rate_limit_params;
+		params->rate_limit.rate_limit_enable = port_cfg->outq[i].rate_limit_enable;
+		params->rate_limit.rate_limit_params = port_cfg->outq[i].rate_limit_params;
 	}
 
 	return 0;
diff --git a/drivers/net/mvpp2/mrvl_tm.c b/drivers/net/mvpp2/mrvl_tm.c
index 9fac80b867..efab7852e5 100644
--- a/drivers/net/mvpp2/mrvl_tm.c
+++ b/drivers/net/mvpp2/mrvl_tm.c
@@ -875,10 +875,10 @@ mrvl_hierarchy_commit(struct rte_eth_dev *dev, int clear_on_fail,
 			if (!node->profile)
 				continue;
 
-			priv->ppio_params.rate_limit_enable = 1;
-			priv->ppio_params.rate_limit_params.cir =
+			priv->ppio_params.rate_limit.rate_limit_enable = 1;
+			priv->ppio_params.rate_limit.rate_limit_params.cir =
 				node->profile->params.peak.rate * 8 / 1000;
-			priv->ppio_params.rate_limit_params.cbs =
+			priv->ppio_params.rate_limit.rate_limit_params.cbs =
 				node->profile->params.peak.size / 1000;
 
 			MRVL_LOG(INFO,
@@ -905,17 +905,17 @@ mrvl_hierarchy_commit(struct rte_eth_dev *dev, int clear_on_fail,
 		}
 
 		if (node->profile) {
-			p->rate_limit_enable = 1;
+			p->rate_limit.rate_limit_enable = 1;
 			/* convert Bytes/s to kilo bits/s */
-			p->rate_limit_params.cir =
+			p->rate_limit.rate_limit_params.cir =
 				node->profile->params.peak.rate * 8 / 1000;
 			/* convert bits to kilo bits */
-			p->rate_limit_params.cbs =
+			p->rate_limit.rate_limit_params.cbs =
 				node->profile->params.peak.size / 1000;
 		} else {
-			p->rate_limit_enable = 0;
-			p->rate_limit_params.cir = 0;
-			p->rate_limit_params.cbs = 0;
+			p->rate_limit.rate_limit_enable = 0;
+			p->rate_limit.rate_limit_params.cir = 0;
+			p->rate_limit.rate_limit_params.cbs = 0;
 		}
 	}
 
@@ -929,9 +929,9 @@ mrvl_hierarchy_commit(struct rte_eth_dev *dev, int clear_on_fail,
 
 			p->sched_mode = PP2_PPIO_SCHED_M_WRR;
 			p->weight = 0;
-			p->rate_limit_enable = 0;
-			p->rate_limit_params.cir = 0;
-			p->rate_limit_params.cbs = 0;
+			p->rate_limit.rate_limit_enable = 0;
+			p->rate_limit.rate_limit_params.cir = 0;
+			p->rate_limit.rate_limit_params.cbs = 0;
 		}
 	}
 
-- 
2.43.0

