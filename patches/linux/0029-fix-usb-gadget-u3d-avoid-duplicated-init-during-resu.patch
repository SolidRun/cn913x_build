From 27d98801c5727df6d7c95eda86785d527cb21d4c Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Fri, 5 May 2017 10:27:23 +0800
Subject: [PATCH 29/45] fix: usb: gadget: u3d: avoid duplicated init during
 resume

In previous implementation, the mvc2_start will be called both
during PM resume and once receive VBUS on interrupt, which leads
to duplication and affect the suspend to RAM long run stability.
This patch modify the PM complete callback that only enable USB3
device irq inside of it.
JIRA A3700-959.

Change-Id: Ieec784b862b0cdd88650be92d239a70e3694800e
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/39168
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/usb/gadget/udc/mvebu_u3d.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/drivers/usb/gadget/udc/mvebu_u3d.c b/drivers/usb/gadget/udc/mvebu_u3d.c
index e00e216093d1..a23ca53b6884 100644
--- a/drivers/usb/gadget/udc/mvebu_u3d.c
+++ b/drivers/usb/gadget/udc/mvebu_u3d.c
@@ -2539,10 +2539,11 @@ static int mvc2_resume(struct device *dev)
 /*
  * The PM core executes complete() callbacks after it has executed
  * the appropriate resume callbacks for all device drivers.
- * This routine starts USB device by enabling EP, which starts the USB transfer between
- * host and device. Later on the USB mass storage function thread will be resumed,
- * which will finish the USB transfer to let the USB device continue to work after
- * resume.
+ * This routine enables USB3 irq in device mode, later on the USB device will be started
+ * once it receives VBUS on interrupt, which starts USB device by enabling EP, and starts
+ * the USB transfer between host and device.
+ * Later on the USB mass storage function thread will be resumed, which will finish the
+ * USB transfer to let the USB device continue to work after resume.
  * If start the USB device in "resume" operation, some device resuming after USB device
  * resuming might take long time, which leads to USB transfer time out.
  */
@@ -2550,9 +2551,8 @@ static void mvc2_complete(struct device *dev)
 {
 	struct mvc2 *cp = (struct mvc2 *)dev_get_drvdata(dev);
 
-	/* Start the current device if driver is connected */
-	if (cp->driver)
-		mvc2_start(&cp->gadget, cp->driver);
+	/* Re-enable USB3 device irq */
+	mvc2_init_interrupt(cp);
 }
 
 static const struct dev_pm_ops mvc2_pm_ops = {
-- 
2.35.3

