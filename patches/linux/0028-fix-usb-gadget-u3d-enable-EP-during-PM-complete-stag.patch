From ecfe29645ac00431bbb69ca11b16f6d67541ccb3 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Tue, 25 Apr 2017 17:46:27 +0800
Subject: [PATCH 28/45] fix: usb: gadget: u3d: enable EP during PM complete
 stage

The Marvell USB3 device driver relies on the mass storage kernel
thread. Once the EP is enabled in USB3 device driver during system
resume, the USB host such as PC starts the transfer, and the mass storage
function thread is expected to handle the transfer.
If the transfer can not be finished within 5 second, the USB host will
set USB device to suspend state, in which state the USB3 device can not
work even after the mass storage kernel thread is resumed.
To avoid this case, the time gap should be as less as possible between
EP enabling and the mass storage thread is resumed.
This patch moves the mvc2_start(used to enable EP) to power management
.complete callback routine, which will be executed after all device are
resumed, and before starting to resume the kernel thread.
JIRA A3700-858

Change-Id: Id4b5d5abc763121fc384e4a8c0f307d68c3d3610
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/38883
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 drivers/usb/gadget/udc/mvebu_u3d.c | 33 +++++++++++++++++++++++++++---
 1 file changed, 30 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/gadget/udc/mvebu_u3d.c b/drivers/usb/gadget/udc/mvebu_u3d.c
index f49e8145135c..e00e216093d1 100644
--- a/drivers/usb/gadget/udc/mvebu_u3d.c
+++ b/drivers/usb/gadget/udc/mvebu_u3d.c
@@ -2525,14 +2525,41 @@ static int mvc2_resume(struct device *dev)
 		}
 	}
 
+	/*
+	 * USB device will be started only in mvc2_complete, once all other
+	 * required device drivers have been resumed.
+	 * This is done to avoid a state which U3D driver is resumed too early
+	 * before mass storage thread has been resumed, which will lead to USB
+	 * transfer time out.
+	*/
+
+	return 0;
+}
+
+/*
+ * The PM core executes complete() callbacks after it has executed
+ * the appropriate resume callbacks for all device drivers.
+ * This routine starts USB device by enabling EP, which starts the USB transfer between
+ * host and device. Later on the USB mass storage function thread will be resumed,
+ * which will finish the USB transfer to let the USB device continue to work after
+ * resume.
+ * If start the USB device in "resume" operation, some device resuming after USB device
+ * resuming might take long time, which leads to USB transfer time out.
+ */
+static void mvc2_complete(struct device *dev)
+{
+	struct mvc2 *cp = (struct mvc2 *)dev_get_drvdata(dev);
+
 	/* Start the current device if driver is connected */
 	if (cp->driver)
 		mvc2_start(&cp->gadget, cp->driver);
-
-	return 0;
 }
 
-SIMPLE_DEV_PM_OPS(mvc2_pm_ops, mvc2_suspend, mvc2_resume);
+static const struct dev_pm_ops mvc2_pm_ops = {
+	.suspend = mvc2_suspend,
+	.resume = mvc2_resume,
+	.complete = mvc2_complete
+};
 #endif
 
 static int mvc2_remove(struct platform_device *dev)
-- 
2.35.3

