From b7078610596754eb087524f0fff29a2c5a410f60 Mon Sep 17 00:00:00 2001
From: Ankur Dwivedi <adwivedi@marvell.com>
Date: Fri, 12 May 2023 14:43:46 +0530
Subject: [PATCH 452/955] test/security: add capability verification for MACsec

Before running each MACsec test, the device capability is read. The
capability is then verified to check if the device supports a feature or
not. If the feature is not supported the test is skipped.

Signed-off-by: Ankur Dwivedi <adwivedi@marvell.com>
Change-Id: Id8dcd2c21dda0e8b0adf903e7a57213b6fcdff7e
---
 app/test/test_security_inline_macsec.c | 368 ++++++++++++++++++++-----
 1 file changed, 293 insertions(+), 75 deletions(-)

diff --git a/app/test/test_security_inline_macsec.c b/app/test/test_security_inline_macsec.c
index 0cfff5f50ae36..8a6e4ad5566da 100644
--- a/app/test/test_security_inline_macsec.c
+++ b/app/test/test_security_inline_macsec.c
@@ -839,10 +839,60 @@ test_macsec_event_callback(uint16_t port_id, enum rte_eth_event_type type,
 	return 0;
 }
 
+static int
+test_macsec_sec_caps_verify(const struct mcs_test_opts *opts,
+		const struct rte_security_capability *sec_cap, bool silent)
+{
+	if (opts->mtu > sec_cap->macsec.mtu) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "MTU size is not supported\n");
+		return -ENOTSUP;
+	}
+
+	if (opts->replay_protect == 1 && sec_cap->macsec.anti_replay == 0) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "Anti replay is not supported\n");
+		return -ENOTSUP;
+	}
+
+	if (opts->replay_win_sz > sec_cap->macsec.replay_win_sz) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "Replay window size is not "
+					"supported\n");
+		return -ENOTSUP;
+	}
+
+	if (opts->rekey_en == 1 && sec_cap->macsec.re_key == 0) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "Rekey is not supported\n");
+		return -ENOTSUP;
+	}
+
+	if (opts->sectag_insert_mode == 0 &&
+			sec_cap->macsec.relative_sectag_insert == 0) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "Relative offset sectag insert "
+					"not supported\n");
+		return -ENOTSUP;
+	}
+
+	if (opts->sectag_insert_mode == 1 &&
+			sec_cap->macsec.fixed_sectag_insert == 0) {
+		if (!silent)
+			RTE_LOG(INFO, USER1, "Fixed offset sectag insert "
+					"not supported\n");
+		return -ENOTSUP;
+	}
+
+	return 0;
+}
+
 static int
 test_macsec(const struct mcs_test_vector *td[], enum mcs_op op, const struct mcs_test_opts *opts)
 {
 	uint16_t rx_sa_id[MCS_MAX_FLOWS][RTE_SECURITY_MACSEC_NUM_AN] = {0};
+	struct rte_security_capability_idx sec_cap_idx;
+	const struct rte_security_capability *sec_cap;
 	uint16_t tx_sa_id[MCS_MAX_FLOWS][2] = {0};
 	uint16_t rx_sc_id[MCS_MAX_FLOWS] = {0};
 	uint16_t tx_sc_id[MCS_MAX_FLOWS] = {0};
@@ -866,6 +916,30 @@ test_macsec(const struct mcs_test_vector *td[], enum mcs_op op, const struct mcs
 		return TEST_SKIPPED;
 	}
 
+	sec_cap_idx.action = RTE_SECURITY_ACTION_TYPE_INLINE_PROTOCOL;
+	sec_cap_idx.protocol = RTE_SECURITY_PROTOCOL_MACSEC;
+	sec_cap_idx.macsec.alg = td[0]->alg;
+	sec_cap = rte_security_capability_get(ctx, &sec_cap_idx);
+	if (sec_cap == NULL) {
+		printf("No capabilities registered\n");
+		return TEST_SKIPPED;
+	}
+
+	if (test_macsec_sec_caps_verify(opts, sec_cap, false) != 0)
+		return TEST_SKIPPED;
+
+	if (opts->rekey_en) {
+		/* Verify the rekey td */
+		sec_cap_idx.macsec.alg = opts->rekey_td->alg;
+		sec_cap = rte_security_capability_get(ctx, &sec_cap_idx);
+		if (sec_cap == NULL) {
+			printf("No capabilities registered\n");
+			return TEST_SKIPPED;
+		}
+		if (test_macsec_sec_caps_verify(opts, sec_cap, false) != 0)
+			return TEST_SKIPPED;
+	}
+
 	tci_off = (opts->sectag_insert_mode == 1) ? RTE_ETHER_HDR_LEN :
 			RTE_ETHER_HDR_LEN + (opts->nb_vlan * RTE_VLAN_HLEN);
 
@@ -1188,6 +1262,7 @@ test_inline_macsec_encap_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1202,7 +1277,11 @@ test_inline_macsec_encap_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Cipher Auth Encryption case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nCipher Auth Encryption case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1211,9 +1290,10 @@ test_inline_macsec_encap_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1222,6 +1302,7 @@ test_inline_macsec_decap_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1234,7 +1315,11 @@ test_inline_macsec_decap_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Cipher Auth Decryption case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nCipher Auth Decryption case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1243,9 +1328,10 @@ test_inline_macsec_decap_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1254,6 +1340,7 @@ test_inline_macsec_auth_only_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1268,7 +1355,11 @@ test_inline_macsec_auth_only_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_AUTH_ONLY, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Auth Generate case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nAuth Generate case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1277,9 +1368,10 @@ test_inline_macsec_auth_only_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1288,6 +1380,7 @@ test_inline_macsec_verify_only_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1301,7 +1394,11 @@ test_inline_macsec_verify_only_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_VERIFY_ONLY, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Auth Verify case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nAuth Verify case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1310,9 +1407,10 @@ test_inline_macsec_verify_only_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1321,6 +1419,7 @@ test_inline_macsec_encap_decap_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1336,7 +1435,11 @@ test_inline_macsec_encap_decap_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_ENCAP_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Cipher Auth Encap-decap case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nCipher Auth Encap-decap case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1345,9 +1448,10 @@ test_inline_macsec_encap_decap_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 
@@ -1357,6 +1461,7 @@ test_inline_macsec_auth_verify_all(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1371,7 +1476,11 @@ test_inline_macsec_auth_verify_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_AUTH_VERIFY, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Auth Generate + Verify case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nAuth Generate + Verify case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1380,9 +1489,10 @@ test_inline_macsec_auth_verify_all(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1420,7 +1530,9 @@ test_inline_macsec_multi_flow(const void *data __rte_unused)
 		tv[i] = (const struct mcs_test_vector *)&iter[i];
 	}
 	err = test_macsec(tv, MCS_ENCAP_DECAP, &opts);
-	if (err) {
+	if (err == TEST_SKIPPED) {
+		printf("Cipher Auth Encryption multi flow skipped\n");
+	} else if (err) {
 		printf("\nCipher Auth Encryption multi flow failed");
 		err = -1;
 	} else {
@@ -1436,6 +1548,7 @@ test_inline_macsec_with_vlan(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1458,7 +1571,11 @@ test_inline_macsec_with_vlan(const void *data __rte_unused)
 			opts.nb_vlan = 2;
 		}
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("VLAN Encap case %d skipped", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\n VLAN Encap case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1479,7 +1596,11 @@ test_inline_macsec_with_vlan(const void *data __rte_unused)
 			opts.nb_vlan = 2;
 		}
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("VLAN Decap case %d skipped", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\n VLAN Decap case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1489,8 +1610,9 @@ test_inline_macsec_with_vlan(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, (2 * size) + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			2 * size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1499,6 +1621,7 @@ test_inline_macsec_pkt_drop(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1514,7 +1637,11 @@ test_inline_macsec_pkt_drop(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_err_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Packet drop case %d skipped", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nPacket drop case %d passed", cur_td->test_idx);
 			err = 0;
 		} else {
@@ -1523,9 +1650,10 @@ test_inline_macsec_pkt_drop(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1534,6 +1662,7 @@ test_inline_macsec_untagged_rx(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1549,7 +1678,10 @@ test_inline_macsec_untagged_rx(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_untagged_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = 0;
 		else
 			err = -1;
@@ -1561,16 +1693,20 @@ test_inline_macsec_untagged_rx(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_untagged_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = 0;
 		else
 			err = -1;
 
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			2 * size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1579,6 +1715,7 @@ test_inline_macsec_bad_tag_rx(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1594,7 +1731,10 @@ test_inline_macsec_bad_tag_rx(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_bad_tag_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
@@ -1602,9 +1742,10 @@ test_inline_macsec_bad_tag_rx(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1613,6 +1754,7 @@ test_inline_macsec_sa_not_in_use(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1628,7 +1770,10 @@ test_inline_macsec_sa_not_in_use(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
@@ -1636,9 +1781,10 @@ test_inline_macsec_sa_not_in_use(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1647,6 +1793,7 @@ test_inline_macsec_decap_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1662,7 +1809,11 @@ test_inline_macsec_decap_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Decap stats case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nDecap stats case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1671,9 +1822,10 @@ test_inline_macsec_decap_stats(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1682,6 +1834,7 @@ test_inline_macsec_verify_only_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1697,7 +1850,11 @@ test_inline_macsec_verify_only_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_VERIFY_ONLY, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Verify only stats case %d skipped\n", cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("\nVerify only stats case %d failed", cur_td->test_idx);
 			err = -1;
 		} else {
@@ -1706,9 +1863,10 @@ test_inline_macsec_verify_only_stats(const void *data __rte_unused)
 		}
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
 
-	return all_err;
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1717,6 +1875,7 @@ test_inline_macsec_pkts_invalid_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1731,15 +1890,19 @@ test_inline_macsec_pkts_invalid_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_err_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = 0;
 		else
 			err = -1;
 
 		all_err += err;
 	}
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1748,6 +1911,7 @@ test_inline_macsec_pkts_unchecked_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_DISABLE;
@@ -1763,7 +1927,10 @@ test_inline_macsec_pkts_unchecked_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_VERIFY_ONLY, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
@@ -1771,8 +1938,9 @@ test_inline_macsec_pkts_unchecked_stats(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1781,6 +1949,7 @@ test_inline_macsec_out_pkts_untagged(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1796,7 +1965,10 @@ test_inline_macsec_out_pkts_untagged(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
@@ -1804,8 +1976,9 @@ test_inline_macsec_out_pkts_untagged(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1814,6 +1987,7 @@ test_inline_macsec_out_pkts_toolong(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_NO_DISCARD;
@@ -1829,7 +2003,10 @@ test_inline_macsec_out_pkts_toolong(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
@@ -1837,8 +2014,9 @@ test_inline_macsec_out_pkts_toolong(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1847,6 +2025,7 @@ test_inline_macsec_encap_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1862,15 +2041,20 @@ test_inline_macsec_encap_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_cipher_vectors[i];
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
+
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1879,6 +2063,7 @@ test_inline_macsec_auth_only_stats(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1894,10 +2079,14 @@ test_inline_macsec_auth_only_stats(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_integrity_vectors[i];
 		err = test_macsec(&cur_td, MCS_AUTH_ONLY, &opts);
-		if (err)
+		if (err == TEST_SKIPPED) {
+			skipped += 1;
+			err = 0;
+		} else if (err)
 			err = -1;
 		else
 			err = 0;
+
 		all_err += err;
 	}
 
@@ -1911,6 +2100,7 @@ test_inline_macsec_interrupts_all(const void *data __rte_unused)
 	struct mcs_err_vector err_vector = {0};
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
+	int skipped = 0;
 	int i, size;
 	int err, all_err = 0;
 	enum rte_eth_event_macsec_subtype subtype[] =  {
@@ -1939,8 +2129,13 @@ test_inline_macsec_interrupts_all(const void *data __rte_unused)
 	for (i = 0; i < size; i++) {
 		cur_td = &list_mcs_intr_test_vectors[i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if ((err_vector.event == RTE_ETH_EVENT_MACSEC_SECTAG_VAL_ERR) &&
-		    (err_vector.event_subtype == subtype[i])) {
+		if (err == TEST_SKIPPED) {
+			printf("Sectag val err interrupt test case %d skipped",
+			       cur_td->test_idx);
+			skipped += 1;
+			err = 0;
+		} else if ((err_vector.event == RTE_ETH_EVENT_MACSEC_SECTAG_VAL_ERR) &&
+			   (err_vector.event_subtype == subtype[i])) {
 			printf("\nSectag val err interrupt test case %d passed",
 			       cur_td->test_idx);
 			err = 0;
@@ -1954,8 +2149,9 @@ test_inline_macsec_interrupts_all(const void *data __rte_unused)
 	rte_eth_dev_callback_unregister(port_id, RTE_ETH_EVENT_MACSEC,
 			test_macsec_event_callback, &err_vector);
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -1964,6 +2160,7 @@ test_inline_macsec_rekey_tx(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -1981,7 +2178,11 @@ test_inline_macsec_rekey_tx(const void *data __rte_unused)
 		cur_td = &list_mcs_rekey_vectors[i];
 		opts.rekey_td = &list_mcs_rekey_vectors[++i];
 		err = test_macsec(&cur_td, MCS_ENCAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Tx hw rekey test case %d skipped\n", i);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("Tx hw rekey test case %d failed\n", i);
 			err = -1;
 		} else {
@@ -1991,8 +2192,9 @@ test_inline_macsec_rekey_tx(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size / 2 + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -2001,6 +2203,7 @@ test_inline_macsec_rekey_rx(const void *data __rte_unused)
 	const struct mcs_test_vector *cur_td;
 	struct mcs_test_opts opts = {0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 
 	opts.val_frames = RTE_SECURITY_MACSEC_VALIDATE_STRICT;
@@ -2016,7 +2219,11 @@ test_inline_macsec_rekey_rx(const void *data __rte_unused)
 		cur_td = &list_mcs_rekey_vectors[i];
 		opts.rekey_td = &list_mcs_rekey_vectors[++i];
 		err = test_macsec(&cur_td, MCS_DECAP, &opts);
-		if (err) {
+		if (err == TEST_SKIPPED) {
+			printf("Rx rekey test case %d skipped\n", i);
+			skipped += 1;
+			err = 0;
+		} else if (err) {
 			printf("Rx rekey test case %d failed\n", i);
 			err = -1;
 		} else {
@@ -2026,8 +2233,9 @@ test_inline_macsec_rekey_rx(const void *data __rte_unused)
 		all_err += err;
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size / 2 + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
@@ -2037,6 +2245,7 @@ test_inline_macsec_anti_replay(const void *data __rte_unused)
 	struct mcs_test_opts opts = {0};
 	uint16_t replay_win_sz[2] = {32, 0};
 	int err, all_err = 0;
+	int skipped = 0;
 	int i, size;
 	int j;
 
@@ -2057,21 +2266,30 @@ test_inline_macsec_anti_replay(const void *data __rte_unused)
 			opts.ar_td[1] = &list_mcs_anti_replay_vectors[++i];
 			opts.ar_td[2] = &list_mcs_anti_replay_vectors[++i];
 			err = test_macsec(&cur_td, MCS_DECAP, &opts);
-			if (err) {
-				printf("Replay window: %u, Anti replay test case %d failed\n",
-				       opts.replay_win_sz, i);
+			if (err == TEST_SKIPPED) {
+				printf("Replay window: %u, Anti replay test "
+				       "case %d skipped\n", opts.replay_win_sz,
+				       i);
+				skipped += 1;
+				err = 0;
+			} else if (err) {
+				printf("Replay window: %u, Anti replay test "
+				       "case %d failed\n", opts.replay_win_sz,
+				       i);
 				err = -1;
 			} else {
-				printf("Replay window: %u, Anti replay test case %d passed\n",
-				       opts.replay_win_sz, i);
+				printf("Replay window: %u, Anti replay test "
+				       "case %d passed\n", opts.replay_win_sz,
+				       i);
 				err = 0;
 			}
 			all_err += err;
 		}
 	}
 
-	printf("\n%s: Success: %d, Failure: %d\n", __func__, size + all_err, -all_err);
-	return all_err;
+	printf("\n%s: Success: %d, Failure: %d, Skipped: %d\n", __func__,
+			size / 2 + all_err - skipped, -all_err, skipped);
+	return skipped > 0 ? TEST_SKIPPED : all_err;
 }
 
 static int
-- 
2.25.1

