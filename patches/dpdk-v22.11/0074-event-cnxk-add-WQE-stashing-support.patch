From d85cfd5377097d352cf7b9db1eccdccc98b96556 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Tue, 16 Aug 2022 19:27:52 +0530
Subject: [PATCH 074/955] event/cnxk: add WQE stashing support

CN10K supports stashing the scheduled WQE carried by `rte_event` to the
cores L2 Dcache.The number of cache lines to be stashed and the offset
is configurable per HWGRP i.e. event queue.

Add device arguments to support configuring WQE stashing.
The dictionary format for device arguments is as follows
`[Qx|stash_offset|stash_length]` here the stash offset can be a
negative integer.

By default stashing is not enabled.

  For stashing mbuf on queue 0 and mbuf + headroom on queue 1
  -a 0002:0e:00.0,stash="[0|-1|1][1|-1|2]"

Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Change-Id: I2644fd0652c3be2a77407c65a3cbe0f2bccee9d9
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/84049
Tested-by: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/92508
Tested-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
---
 doc/guides/eventdevs/cnxk.rst       | 14 ++++++
 drivers/common/cnxk/roc_api.h       |  3 ++
 drivers/common/cnxk/roc_features.h  | 13 ++++++
 drivers/common/cnxk/roc_mbox.h      | 12 +++++-
 drivers/common/cnxk/roc_model.h     |  6 +++
 drivers/common/cnxk/roc_sso.c       | 50 +++++++++++++++++++++-
 drivers/common/cnxk/roc_sso.h       | 11 ++++-
 drivers/common/cnxk/version.map     |  1 +
 drivers/event/cnxk/cn10k_eventdev.c | 20 +++++++++
 drivers/event/cnxk/cnxk_eventdev.c  | 66 ++++++++++++++++++++++++++---
 drivers/event/cnxk/cnxk_eventdev.h  | 11 ++++-
 11 files changed, 197 insertions(+), 10 deletions(-)
 create mode 100644 drivers/common/cnxk/roc_features.h

diff --git a/doc/guides/eventdevs/cnxk.rst b/doc/guides/eventdevs/cnxk.rst
index a91c947c10bcd..c3c0bfd7b56e5 100644
--- a/doc/guides/eventdevs/cnxk.rst
+++ b/doc/guides/eventdevs/cnxk.rst
@@ -102,6 +102,20 @@ Runtime Config Options
 
     -a 0002:0e:00.0,qos=[1-50-50]
 
+- ``CN10K WQE stashing support``
+
+  CN10K supports stashing the scheduled WQE carried by `rte_event` to the
+  cores L2 Dcache. The number of cache lines to be stashed and the offset
+  is configurable per HWGRP i.e. event queue. The dictionary format is as
+  follows `[Qx|stash_offset|stash_length]` here the stash offset can be
+  a negative integer.
+  By default stashing is not enabled.
+
+  For example::
+
+    For stashing mbuf on queue 0 and mbuf + headroom on queue 1
+    -a 0002:0e:00.0,stash="[0|-1|1][1|-1|2]"
+
 - ``Force Rx Back pressure``
 
    Force Rx back pressure when same mempool is used across ethernet device
diff --git a/drivers/common/cnxk/roc_api.h b/drivers/common/cnxk/roc_api.h
index 14a11321e071e..ea132453f09e8 100644
--- a/drivers/common/cnxk/roc_api.h
+++ b/drivers/common/cnxk/roc_api.h
@@ -50,6 +50,9 @@
 /* HW Errata */
 #include "roc_errata.h"
 
+/* HW Features */
+#include "roc_features.h"
+
 /* Mbox */
 #include "roc_mbox.h"
 
diff --git a/drivers/common/cnxk/roc_features.h b/drivers/common/cnxk/roc_features.h
new file mode 100644
index 0000000000000..c92f397361745
--- /dev/null
+++ b/drivers/common/cnxk/roc_features.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(C) 2022 Marvell.
+ */
+#ifndef _ROC_FEATURES_H_
+#define _ROC_FEATURES_H_
+
+static inline bool
+roc_feature_sso_has_stash(void)
+{
+	return roc_model_is_cn103xx() ? true : false;
+}
+
+#endif
diff --git a/drivers/common/cnxk/roc_mbox.h b/drivers/common/cnxk/roc_mbox.h
index 0989bddc3b78d..3540b26acc296 100644
--- a/drivers/common/cnxk/roc_mbox.h
+++ b/drivers/common/cnxk/roc_mbox.h
@@ -128,6 +128,8 @@ struct mbox_msghdr {
 	M(SSO_CONFIG_LSW, 0x612, ssow_config_lsw, ssow_config_lsw, msg_rsp)    \
 	M(SSO_HWS_CHNG_MSHIP, 0x613, ssow_chng_mship, ssow_chng_mship,         \
 	  msg_rsp)                                                             \
+	M(SSO_GRP_STASH_CONFIG, 0x614, sso_grp_stash_config,                   \
+	  sso_grp_stash_cfg, msg_rsp)                                          \
 	/* TIM mbox IDs (range 0x800 - 0x9FF) */                               \
 	M(TIM_LF_ALLOC, 0x800, tim_lf_alloc, tim_lf_alloc_req,                 \
 	  tim_lf_alloc_rsp)                                                    \
@@ -266,7 +268,7 @@ struct mbox_msghdr {
 	  msg_rsp)                                                             \
 	M(NIX_RX_SW_SYNC, 0x8022, nix_rx_sw_sync, msg_req, msg_rsp)            \
 	M(NIX_READ_INLINE_IPSEC_CFG, 0x8023, nix_read_inline_ipsec_cfg,        \
-	  msg_req, nix_inline_ipsec_cfg)				       \
+	  msg_req, nix_inline_ipsec_cfg)                                       \
 	M(NIX_LF_INLINE_RQ_CFG, 0x8024, nix_lf_inline_rq_cfg,                  \
 	  nix_rq_cpt_field_mask_cfg_req, msg_rsp)                              \
 	M(NIX_SPI_TO_SA_ADD, 0x8026, nix_spi_to_sa_add, nix_spi_to_sa_add_req, \
@@ -1371,6 +1373,14 @@ struct sso_grp_qos_cfg {
 	uint16_t __io iaq_thr;
 };
 
+struct sso_grp_stash_cfg {
+	struct mbox_msghdr hdr;
+	uint16_t __io grp;
+	uint8_t __io ena;
+	uint8_t __io offset : 4;
+	uint8_t __io num_linesm1 : 4;
+};
+
 struct sso_grp_stats {
 	struct mbox_msghdr hdr;
 	uint16_t __io grp;
diff --git a/drivers/common/cnxk/roc_model.h b/drivers/common/cnxk/roc_model.h
index 848609eb351fa..46a5cca407611 100644
--- a/drivers/common/cnxk/roc_model.h
+++ b/drivers/common/cnxk/roc_model.h
@@ -242,6 +242,12 @@ roc_model_is_cn10kb(void)
 	return roc_model->flag & ROC_MODEL_CN103xx;
 }
 
+static inline uint64_t
+roc_model_is_cn103xx(void)
+{
+	return roc_model->flag & ROC_MODEL_CN103xx;
+}
+
 static inline bool
 roc_env_is_hw(void)
 {
diff --git a/drivers/common/cnxk/roc_sso.c b/drivers/common/cnxk/roc_sso.c
index 9920d0c604c8c..868c736eb5929 100644
--- a/drivers/common/cnxk/roc_sso.c
+++ b/drivers/common/cnxk/roc_sso.c
@@ -419,7 +419,7 @@ roc_sso_hwgrp_hws_link_status(struct roc_sso *roc_sso, uint8_t hws,
 
 int
 roc_sso_hwgrp_qos_config(struct roc_sso *roc_sso, struct roc_sso_hwgrp_qos *qos,
-			 uint8_t nb_qos)
+			 uint16_t nb_qos)
 {
 	struct sso *sso = roc_sso_to_sso_priv(roc_sso);
 	struct dev *dev = &sso->dev;
@@ -427,6 +427,9 @@ roc_sso_hwgrp_qos_config(struct roc_sso *roc_sso, struct roc_sso_hwgrp_qos *qos,
 	struct mbox *mbox;
 	int i, rc;
 
+	if (!nb_qos)
+		return 0;
+
 	plt_spinlock_lock(&sso->mbox_lock);
 	mbox = mbox_get(dev->mbox);
 	for (i = 0; i < nb_qos; i++) {
@@ -720,6 +723,51 @@ roc_sso_hwgrp_set_priority(struct roc_sso *roc_sso, uint16_t hwgrp,
 	return rc;
 }
 
+int
+roc_sso_hwgrp_stash_config(struct roc_sso *roc_sso,
+			   struct roc_sso_hwgrp_stash *stash, uint16_t nb_stash)
+{
+	struct sso *sso = roc_sso_to_sso_priv(roc_sso);
+	struct sso_grp_stash_cfg *req;
+	struct dev *dev = &sso->dev;
+	struct mbox *mbox;
+	int i, rc;
+
+	if (!nb_stash)
+		return 0;
+
+	plt_spinlock_lock(&sso->mbox_lock);
+	mbox = mbox_get(dev->mbox);
+	for (i = 0; i < nb_stash; i++) {
+		req = mbox_alloc_msg_sso_grp_stash_config(mbox);
+		if (req == NULL) {
+			rc = mbox_process(mbox);
+			if (rc) {
+				rc = -EIO;
+				goto fail;
+			}
+
+			req = mbox_alloc_msg_sso_grp_stash_config(mbox);
+			if (req == NULL) {
+				rc = -ENOSPC;
+				goto fail;
+			}
+		}
+		req->ena = true;
+		req->grp = stash[i].hwgrp;
+		req->offset = stash[i].stash_offset;
+		req->num_linesm1 = stash[i].stash_count - 1;
+	}
+
+	rc = mbox_process(mbox);
+	if (rc)
+		rc = -EIO;
+fail:
+	mbox_put(mbox);
+	plt_spinlock_unlock(&sso->mbox_lock);
+	return rc;
+}
+
 int
 roc_sso_rsrc_init(struct roc_sso *roc_sso, uint8_t nb_hws, uint16_t nb_hwgrp)
 {
diff --git a/drivers/common/cnxk/roc_sso.h b/drivers/common/cnxk/roc_sso.h
index 5075991ef7693..0bd4c6aef6ea8 100644
--- a/drivers/common/cnxk/roc_sso.h
+++ b/drivers/common/cnxk/roc_sso.h
@@ -12,6 +12,12 @@ struct roc_sso_hwgrp_qos {
 	uint8_t taq_prcnt;
 };
 
+struct roc_sso_hwgrp_stash {
+	uint16_t hwgrp;
+	uint8_t stash_offset;
+	uint8_t stash_count;
+};
+
 struct roc_sso_hws_stats {
 	uint64_t arbitration;
 };
@@ -89,7 +95,7 @@ int __roc_api roc_sso_rsrc_init(struct roc_sso *roc_sso, uint8_t nb_hws,
 void __roc_api roc_sso_rsrc_fini(struct roc_sso *roc_sso);
 int __roc_api roc_sso_hwgrp_qos_config(struct roc_sso *roc_sso,
 				       struct roc_sso_hwgrp_qos *qos,
-				       uint8_t nb_qos);
+				       uint16_t nb_qos);
 int __roc_api roc_sso_hwgrp_alloc_xaq(struct roc_sso *roc_sso,
 				      uint32_t npa_aura_id, uint16_t hwgrps);
 int __roc_api roc_sso_hwgrp_release_xaq(struct roc_sso *roc_sso,
@@ -111,6 +117,9 @@ int __roc_api roc_sso_hwgrp_init_xaq_aura(struct roc_sso *roc_sso,
 					  uint32_t nb_xae);
 int __roc_api roc_sso_hwgrp_free_xaq_aura(struct roc_sso *roc_sso,
 					  uint16_t nb_hwgrp);
+int __roc_api roc_sso_hwgrp_stash_config(struct roc_sso *roc_sso,
+					 struct roc_sso_hwgrp_stash *stash,
+					 uint16_t nb_stash);
 
 /* Debug */
 void __roc_api roc_sso_dump(struct roc_sso *roc_sso, uint8_t nb_hws,
diff --git a/drivers/common/cnxk/version.map b/drivers/common/cnxk/version.map
index cfeef3b89694d..175571bb4055b 100644
--- a/drivers/common/cnxk/version.map
+++ b/drivers/common/cnxk/version.map
@@ -376,6 +376,7 @@ INTERNAL {
 	roc_sso_hwgrp_qos_config;
 	roc_sso_hwgrp_release_xaq;
 	roc_sso_hwgrp_set_priority;
+	roc_sso_hwgrp_stash_config;
 	roc_sso_hwgrp_stats_get;
 	roc_sso_hws_base_get;
 	roc_sso_hws_link;
diff --git a/drivers/event/cnxk/cn10k_eventdev.c b/drivers/event/cnxk/cn10k_eventdev.c
index 30c922b5fc6e2..604bef8afeb50 100644
--- a/drivers/event/cnxk/cn10k_eventdev.c
+++ b/drivers/event/cnxk/cn10k_eventdev.c
@@ -780,6 +780,24 @@ cn10k_sso_port_unlink(struct rte_eventdev *event_dev, void *port,
 	return (int)nb_unlinks;
 }
 
+static void
+cn10k_sso_configure_queue_stash(struct rte_eventdev *event_dev)
+{
+	struct cnxk_sso_evdev *dev = cnxk_sso_pmd_priv(event_dev);
+	struct roc_sso_hwgrp_stash stash[dev->stash_cnt];
+	int i, rc;
+
+	plt_sso_dbg();
+	for (i = 0; i < dev->stash_cnt; i++) {
+		stash[i].hwgrp = dev->stash_parse_data[i].queue;
+		stash[i].stash_offset = dev->stash_parse_data[i].stash_offset;
+		stash[i].stash_count = dev->stash_parse_data[i].stash_length;
+	}
+	rc = roc_sso_hwgrp_stash_config(&dev->sso, stash, dev->stash_cnt);
+	if (rc < 0)
+		plt_warn("failed to configure HWGRP WQE stashing rc = %d", rc);
+}
+
 static int
 cn10k_sso_start(struct rte_eventdev *event_dev)
 {
@@ -789,6 +807,7 @@ cn10k_sso_start(struct rte_eventdev *event_dev)
 	if (rc < 0)
 		return rc;
 
+	cn10k_sso_configure_queue_stash(event_dev);
 	rc = cnxk_sso_start(event_dev, cn10k_sso_hws_reset,
 			    cn10k_sso_hws_flush_events);
 	if (rc < 0)
@@ -1220,6 +1239,7 @@ RTE_PMD_REGISTER_PARAM_STRING(event_cn10k, CNXK_SSO_XAE_CNT "=<int>"
 			      CNXK_SSO_GGRP_QOS "=<string>"
 			      CNXK_SSO_FORCE_BP "=1"
 			      CN10K_SSO_GW_MODE "=<int>"
+			      CN10K_SSO_STASH "=<string>"
 			      CNXK_TIM_DISABLE_NPA "=1"
 			      CNXK_TIM_CHNK_SLOTS "=<int>"
 			      CNXK_TIM_RINGS_LMT "=<int>"
diff --git a/drivers/event/cnxk/cnxk_eventdev.c b/drivers/event/cnxk/cnxk_eventdev.c
index efa9359ce6b79..ab1c482d01837 100644
--- a/drivers/event/cnxk/cnxk_eventdev.c
+++ b/drivers/event/cnxk/cnxk_eventdev.c
@@ -456,6 +456,8 @@ cnxk_sso_close(struct rte_eventdev *event_dev, cnxk_sso_unlink_t unlink_fn)
 	return 0;
 }
 
+typedef void (*param_parse_t)(char *value, void *opaque);
+
 static void
 parse_queue_param(char *value, void *opaque)
 {
@@ -493,7 +495,44 @@ parse_queue_param(char *value, void *opaque)
 }
 
 static void
-parse_qos_list(const char *value, void *opaque)
+parse_stash_param(char *value, void *opaque)
+{
+	struct cnxk_sso_stash queue_stash = {0};
+	struct cnxk_sso_evdev *dev = opaque;
+	struct cnxk_sso_stash *old_ptr;
+	char *tok = strtok(value, "|");
+	uint16_t *val;
+
+	if (!strlen(value))
+		return;
+
+	val = (uint16_t *)&queue_stash;
+	while (tok != NULL) {
+		*val = atoi(tok);
+		tok = strtok(NULL, "|");
+		val++;
+	}
+
+	if (val != (&queue_stash.stash_length + 1)) {
+		plt_err("Invalid QoS parameter expected [Qx|stash_offset|stash_length]");
+		return;
+	}
+
+	dev->stash_cnt++;
+	old_ptr = dev->stash_parse_data;
+	dev->stash_parse_data =
+		rte_realloc(dev->stash_parse_data,
+			    sizeof(struct cnxk_sso_stash) * dev->stash_cnt, 0);
+	if (dev->stash_parse_data == NULL) {
+		dev->stash_parse_data = old_ptr;
+		dev->stash_cnt--;
+		return;
+	}
+	dev->stash_parse_data[dev->stash_cnt - 1] = queue_stash;
+}
+
+static void
+parse_list(const char *value, void *opaque, param_parse_t fn)
 {
 	char *s = strdup(value);
 	char *start = NULL;
@@ -508,7 +547,7 @@ parse_qos_list(const char *value, void *opaque)
 
 		if (start && start < end) {
 			*end = 0;
-			parse_queue_param(start + 1, opaque);
+			fn(start + 1, opaque);
 			s = end;
 			start = end;
 		}
@@ -519,14 +558,27 @@ parse_qos_list(const char *value, void *opaque)
 }
 
 static int
-parse_sso_kvargs_dict(const char *key, const char *value, void *opaque)
+parse_sso_kvargs_qos_dict(const char *key, const char *value, void *opaque)
 {
 	RTE_SET_USED(key);
 
 	/* Dict format [Qx-TAQ-IAQ][Qz-TAQ-IAQ] use '-' cause ',' isn't allowed.
 	 * Everything is expressed in percentages, 0 represents default.
 	 */
-	parse_qos_list(value, opaque);
+	parse_list(value, opaque, parse_queue_param);
+
+	return 0;
+}
+
+static int
+parse_sso_kvargs_stash_dict(const char *key, const char *value, void *opaque)
+{
+	RTE_SET_USED(key);
+
+	/* Dict format [Qx|<stash_offset>|<stash_length>] use '|' cause ','
+	 * isn't allowed.
+	 */
+	parse_list(value, opaque, parse_stash_param);
 
 	return 0;
 }
@@ -545,14 +597,16 @@ cnxk_sso_parse_devargs(struct cnxk_sso_evdev *dev, struct rte_devargs *devargs)
 
 	rte_kvargs_process(kvlist, CNXK_SSO_XAE_CNT, &parse_kvargs_value,
 			   &dev->xae_cnt);
-	rte_kvargs_process(kvlist, CNXK_SSO_GGRP_QOS, &parse_sso_kvargs_dict,
-			   dev);
+	rte_kvargs_process(kvlist, CNXK_SSO_GGRP_QOS,
+			   &parse_sso_kvargs_qos_dict, dev);
 	rte_kvargs_process(kvlist, CNXK_SSO_FORCE_BP, &parse_kvargs_flag,
 			   &dev->force_ena_bp);
 	rte_kvargs_process(kvlist, CN9K_SSO_SINGLE_WS, &parse_kvargs_flag,
 			   &single_ws);
 	rte_kvargs_process(kvlist, CN10K_SSO_GW_MODE, &parse_kvargs_flag,
 			   &dev->gw_mode);
+	rte_kvargs_process(kvlist, CN10K_SSO_STASH,
+			   &parse_sso_kvargs_stash_dict, dev);
 	dev->dual_ws = !single_ws;
 	rte_kvargs_free(kvlist);
 }
diff --git a/drivers/event/cnxk/cnxk_eventdev.h b/drivers/event/cnxk/cnxk_eventdev.h
index fdbcfb4640360..b41bbf4a95e37 100644
--- a/drivers/event/cnxk/cnxk_eventdev.h
+++ b/drivers/event/cnxk/cnxk_eventdev.h
@@ -28,6 +28,7 @@
 #define CNXK_SSO_FORCE_BP  "force_rx_bp"
 #define CN9K_SSO_SINGLE_WS "single_ws"
 #define CN10K_SSO_GW_MODE  "gw_mode"
+#define CN10K_SSO_STASH	   "stash"
 
 #define NSEC2USEC(__ns)		((__ns) / 1E3)
 #define USEC2NSEC(__us)		((__us)*1E3)
@@ -90,6 +91,12 @@ struct cnxk_sso_qos {
 	uint16_t iaq_prcnt;
 };
 
+struct cnxk_sso_stash {
+	uint16_t queue;
+	uint16_t stash_offset;
+	uint16_t stash_length;
+};
+
 struct cnxk_sso_evdev {
 	struct roc_sso sso;
 	uint8_t max_event_queues;
@@ -123,13 +130,15 @@ struct cnxk_sso_evdev {
 	struct cnxk_timesync_info *tstamp[RTE_MAX_ETHPORTS];
 	/* Dev args */
 	uint32_t xae_cnt;
-	uint8_t qos_queue_cnt;
+	uint16_t qos_queue_cnt;
 	struct cnxk_sso_qos *qos_parse_data;
 	uint8_t force_ena_bp;
 	/* CN9K */
 	uint8_t dual_ws;
 	/* CN10K */
 	uint8_t gw_mode;
+	uint16_t stash_cnt;
+	struct cnxk_sso_stash *stash_parse_data;
 	/* Crypto adapter */
 	uint8_t is_ca_internal_port;
 } __rte_cache_aligned;
-- 
2.25.1

