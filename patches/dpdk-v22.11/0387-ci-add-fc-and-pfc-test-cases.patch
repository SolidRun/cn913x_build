From 92fcf9b2dcf68f47410206f6fe971fb673b0ea0d Mon Sep 17 00:00:00 2001
From: Rakesh Kudurumalla <rkudurumalla@marvell.com>
Date: Fri, 28 Apr 2023 19:10:30 +0530
Subject: [PATCH 387/955] ci: add fc and pfc test cases

This patch verifies flow control configuration
and priority flow control configuration for both
PF and VF devices

Signed-off-by: Rakesh Kudurumalla <rkudurumalla@marvell.com>
Change-Id: Ic111c5c4dd570982c67a78f7e7cb4d4d8fe84296
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/102555
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Tested-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
---
 .../test/cnxk-tests/flow_ctrl/cnxk_fc_test.sh | 212 ++++++++++++++++++
 1 file changed, 212 insertions(+)

diff --git a/marvell-ci/test/cnxk-tests/flow_ctrl/cnxk_fc_test.sh b/marvell-ci/test/cnxk-tests/flow_ctrl/cnxk_fc_test.sh
index 124056fac89ec..0c51346f40266 100755
--- a/marvell-ci/test/cnxk-tests/flow_ctrl/cnxk_fc_test.sh
+++ b/marvell-ci/test/cnxk-tests/flow_ctrl/cnxk_fc_test.sh
@@ -9,8 +9,10 @@ CNXKTESTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/.."
 source $CNXKTESTPATH/common/testpmd/common.env
 
 PRFX="fc-config"
+PRFX_VF="vf_fc-config"
 
 TESTPMD_PORT="0002:02:00.0"
+TESTPMD_VF_PORT="0002:02:00.1"
 TESTPMD_COREMASK="0xfff"
 
 if [ -f $CNXKTESTPATH/../board/oxk-devbind-basic.sh ]
@@ -28,6 +30,8 @@ function bind_interface()
 {
 	echo "port $TESTPMD_PORT is bound to VFIO"
 	$VFIO_DEVBIND -b vfio-pci $TESTPMD_PORT
+	echo 1 > /sys/bus/pci/devices/$TESTPMD_PORT/sriov_numvfs
+	sleep 1
 }
 
 function check_fc_state()
@@ -189,6 +193,214 @@ sleep 1
 
 check_pfc_state 1
 
+testpmd_quit $PRFX
+sleep 1
+testpmd_cleanup $PRFX
+sleep 1
+
 testpmd_log $PRFX
 
 echo "SUCCESS: testpmd flow control configuration test suit completed"
+
+function verify_fc_state()
+{
+	local debug_dir
+
+	debug_dir="/sys/kernel/debug/octeontx2"
+	if [[ -d /sys/kernel/debug/cn10k ]]; then
+		debug_dir="/sys/kernel/debug/cn10k"
+	fi
+
+	cq_ctx="$debug_dir/nix/cq_ctx"
+	rsrc_alloc="$debug_dir/rsrc_alloc"
+
+	if $SUDO test -f "$rsrc_alloc"; then
+		if [ $1 == "pf" ] ;then
+			nix_lf=$(echo "`$SUDO cat $rsrc_alloc`" | grep "PF1" | awk '{print $3}' | head -1)
+		fi
+		if [ $1 == "vf" ] ;then
+			nix_lf=$(echo "`$SUDO cat $rsrc_alloc`" | grep "PF1:VF0" | awk '{print $3}' | head -1)
+		fi
+	else
+		echo "$rsrc_alloc is not available"
+		exit 1
+	fi
+
+	if $SUDO test -f "$cq_ctx"; then
+		$SUDO echo "$nix_lf 0" > $cq_ctx
+		bp_ena=$(echo "`$SUDO cat $cq_ctx`" | grep "bp_ena" | awk '{print $3}')
+	else
+		echo "$cq_ctx is not available"
+		exit 1
+	fi
+
+	if [[ $bp_ena -ne $2 ]]; then
+		echo "flow control validation failed."
+		exit 1
+	fi
+}
+
+function verify_pfc_state()
+{
+	local debug_dir
+
+	debug_dir="/sys/kernel/debug/octeontx2"
+	if [[ -d /sys/kernel/debug/cn10k ]]; then
+		debug_dir="/sys/kernel/debug/cn10k"
+	fi
+
+	cq_id=0
+	cq_ctx="$debug_dir/nix/cq_ctx"
+	rsrc_alloc="$debug_dir/rsrc_alloc"
+
+	if $SUDO test -f "$rsrc_alloc"; then
+		if [ $1 == "pf" ] ;then
+			nix_lf=$(echo "`$SUDO cat $rsrc_alloc`" | grep "PF1" | awk '{print $3}' | head -1)
+		fi
+		if [ $1 == "vf" ] ;then
+			nix_lf=$(echo "`$SUDO cat $rsrc_alloc`" | grep "PF1:VF0" | awk '{print $3}' | head -1)
+		fi
+	else
+		echo "$rsrc_alloc is not available"
+		exit 1
+	fi
+
+	if $SUDO test -f "$cq_ctx"; then
+		$SUDO echo "$nix_lf $cq_id" > $cq_ctx
+		bp_ena=$(echo "`$SUDO cat $cq_ctx`" | grep "bp_ena" | awk '{print $3}')
+	else
+		echo "$cq_ctx is not available"
+		exit 1
+	fi
+
+	if [[ $bp_ena -ne $2 ]]; then
+		echo "priority flow control validation failed."
+		exit 1
+	fi
+}
+
+function stop_testpmd()
+{
+	testpmd_quit $PRFX_VF
+	sleep 1
+	testpmd_cleanup $PRFX_VF
+	sleep 3
+	testpmd_quit $PRFX
+	sleep 1
+	testpmd_cleanup $PRFX
+	sleep 1
+}
+
+function configure_fc()
+{
+	testpmd_cmd $PRFX "set flow_ctrl rx on tx on 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+	testpmd_cmd $PRFX_VF "set flow_ctrl rx on tx on 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+	verify_fc_state pf 1
+	sleep 1
+	verify_fc_state vf 1
+	sleep 1
+	echo "PF and VF flow control configuration Success"
+}
+
+function configure_pfc()
+{
+	testpmd_cmd $PRFX "set pfc_queue_ctrl 0 rx on 0 0 tx on 0 0 2047"
+	sleep 1
+	testpmd_cmd $PRFX_VF "set pfc_queue_ctrl 0 rx on 0 0 tx on 0 0 2047"
+	sleep 1
+	verify_pfc_state pf 1
+	sleep 1
+	verify_pfc_state vf 1
+	sleep 1
+	echo "PF and VF Priority flow control configuration Success"
+}
+
+function configure_pf_vf()
+{
+	echo "Testpmd running with $TESTPMD_PORT, Coremask=$TESTPMD_COREMASK"
+	testpmd_launch $PRFX \
+		"-c $TESTPMD_COREMASK -a $TESTPMD_PORT,flow_max_priority=8 \
+		--vfio-vf-token=b9d20911-e43f-4115-83f5-dfa0181277fb --file-prefix=pf" \
+		"--no-flush-rx --rxq=1 --txq=1 --nb-cores=1"
+	sleep 1
+	testpmd_cmd $PRFX "port stop all"
+	sleep 1
+	testpmd_cmd $PRFX "set flow_ctrl rx off tx off 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+	echo "Testpmd running with $TESTPMD_VF_PORT, Coremask=$TESTPMD_COREMASK"
+	testpmd_launch $PRFX_VF \
+		"-c $TESTPMD_COREMASK -a $TESTPMD_VF_PORT,flow_max_priority=8 \
+		--vfio-vf-token=b9d20911-e43f-4115-83f5-dfa0181277fb --file-prefix=vf" \
+		"--no-flush-rx --rxq=1 --txq=1 --nb-cores=1"
+	testpmd_cmd $PRFX_VF "port stop all"
+	sleep 1
+	testpmd_cmd $PRFX_VF "set flow_ctrl rx off tx off 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+}
+
+function configure_pf_dpdk()
+{
+	set +x
+	echo "Testpmd running with $TESTPMD_PORT, Coremask=$TESTPMD_COREMASK"
+	testpmd_launch $PRFX \
+		"-c $TESTPMD_COREMASK -a $TESTPMD_PORT,flow_max_priority=8 \
+		--vfio-vf-token=b9d20911-e43f-4115-83f5-dfa0181277fb --file-prefix=pf" \
+		"--no-flush-rx --rxq=1 --txq=1 --nb-cores=1"
+	sleep 1
+	testpmd_cmd $PRFX "port stop all"
+	sleep 1
+	testpmd_cmd $PRFX "set flow_ctrl rx off tx off 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+
+
+	echo $TESTPMD_VF_PORT > /sys/bus/pci/devices/$TESTPMD_VF_PORT/driver/unbind
+	sleep 2
+	echo rvu_nicvf > /sys/bus/pci/devices/$TESTPMD_VF_PORT/driver_override
+	sleep 2
+	echo $TESTPMD_VF_PORT > /sys/bus/pci/drivers/rvu_nicvf/bind
+	sleep 2
+}
+
+function configure_fc_dpdk_kernel()
+{
+	local intf=`ls /sys/bus/pci/devices/$TESTPMD_VF_PORT/net/`
+	local status
+
+	testpmd_cmd $PRFX "set flow_ctrl rx on tx on 0 0 0 0 mac_ctrl_frame_fwd off autoneg off 0"
+	sleep 1
+	verify_fc_state pf 1
+	sleep 2
+	status=`ethtool -a $intf | grep RX | awk '{print $2}'`
+	if [[ $status == "on" ]]; then
+		echo "flow control validation success."
+	else
+		echo "flow control validation failed."
+		exit 1;
+	fi
+}
+
+echo "Starting PFC & FC Test for PF and VF with DPDK"
+
+configure_pf_vf
+
+configure_fc
+
+stop_testpmd
+
+configure_pf_vf
+
+configure_pfc
+
+stop_testpmd
+
+echo "Starting FC Test for PF DPDK and VF with kernel"
+configure_pf_dpdk
+
+configure_fc_dpdk_kernel
+
+testpmd_quit $PRFX
+sleep 1
+testpmd_cleanup $PRFX
+
-- 
2.25.1

