From 6a96a900133707d6840eade5a71f537eeab3cfa2 Mon Sep 17 00:00:00 2001
From: Mohammad Iqbal Ahmad <mahmad@marvell.com>
Date: Thu, 16 Feb 2023 01:45:27 +0530
Subject: [PATCH 258/955] crypto/cnxk: fix GCC 12 Wmaybe-uninitialized warning
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix for GCC 12 compilation warning (-Wmaybe-uninitialized)

	../drivers/crypto/cnxk/cn10k_cryptodev_ops.c:101:1: warning:
		‘cpt_inst_w4’ may be used uninitialized [-Wmaybe-uninitialized]
	101 | cn10k_cpt_fill_inst(struct cnxk_cpt_qp *qp,
			struct rte_crypto_op *ops[], struct cpt_inst_s inst[],
			| ^~~~~~~~~~~~~~~~~~~
	In file included from ../drivers/crypto/cnxk/cn10k_cryptodev_ops.c:29:
		../drivers/crypto/cnxk/cnxk_se.h:826:27:
			note: ‘cpt_inst_w4’ declared here
		826 |         union cpt_inst_w4 cpt_inst_w4;

Fixes: 3de331795f73 ("crypto/cnxk: add flexi cipher encryption")
Fixes: 0fbb3e6cf20b ("crypto/cnxk: support stream cipher chained operations")
Fixes: 89b78a2e3df9 ("crypto/cnxk: fix IV length for ZUC-256")

Signed-off-by: Mohammad Iqbal Ahmad <mahmad@marvell.com>
Change-Id: I49e673c4d9eae35f84416880d0c7da7b98262c6e
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/96966
Base-Builds: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Base-Tests: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Tested-by: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Reviewed-by: Anoob Joseph <anoobj@marvell.com>
Reviewed-by: Tejasree Kondoj <ktejasree@marvell.com>
---
 drivers/crypto/cnxk/cnxk_se.h | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/crypto/cnxk/cnxk_se.h b/drivers/crypto/cnxk/cnxk_se.h
index 69cd343eea1bb..bf473e4233c59 100644
--- a/drivers/crypto/cnxk/cnxk_se.h
+++ b/drivers/crypto/cnxk/cnxk_se.h
@@ -874,9 +874,9 @@ cpt_enc_hmac_prep(uint32_t flags, uint64_t d_offs, uint64_t d_lens,
 	}
 
 	/* Encryption */
+	cpt_inst_w4.u64 = se_ctx->template_w4.u64;
 	cpt_inst_w4.s.opcode_major = ROC_SE_MAJOR_OP_FC;
-	cpt_inst_w4.s.opcode_minor = ROC_SE_FC_MINOR_OP_ENCRYPT;
-	cpt_inst_w4.s.opcode_minor |= (uint64_t)op_minor;
+	cpt_inst_w4.s.opcode_minor |= ROC_SE_FC_MINOR_OP_ENCRYPT;
 
 	if (hash_type == ROC_SE_GMAC_TYPE) {
 		encr_offset = 0;
@@ -1185,8 +1185,8 @@ cpt_pdcp_chain_alg_prep(uint32_t req_flags, uint64_t d_offs, uint64_t d_lens,
 		return -1;
 	}
 
+	cpt_inst_w4.u64 = se_ctx->template_w4.u64;
 	cpt_inst_w4.s.opcode_major = ROC_SE_MAJOR_OP_PDCP_CHAIN;
-	cpt_inst_w4.s.opcode_minor = se_ctx->template_w4.s.opcode_minor;
 
 	cpt_inst_w4.s.param1 = auth_data_len;
 	cpt_inst_w4.s.param2 = 0;
@@ -1359,8 +1359,8 @@ cpt_pdcp_alg_prep(uint32_t req_flags, uint64_t d_offs, uint64_t d_lens,
 	flags = se_ctx->zsk_flags;
 	mac_len = se_ctx->mac_len;
 
+	cpt_inst_w4.u64 = se_ctx->template_w4.u64;
 	cpt_inst_w4.s.opcode_major = ROC_SE_MAJOR_OP_PDCP;
-	cpt_inst_w4.s.opcode_minor = se_ctx->template_w4.s.opcode_minor;
 
 	if (flags == 0x1) {
 		iv_s = params->auth_iv_buf;
-- 
2.25.1

