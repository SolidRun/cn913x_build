From f242c6ecab550bd669be9a485d190ebf6ce8c1e7 Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <radhac@marvell.com>
Date: Mon, 27 Mar 2023 16:42:52 -0700
Subject: [PATCH 340/955] dma/cnxk: update func field based on transfer type

Use pfid and vfid of src_port for incoming DMA transfers and dst_port
for outgoing DMA transfers.

Signed-off-by: Radha Mohan Chintakuntla <radhac@marvell.com>
Change-Id: I100d22c951f8cee96e45d4080f042e7eaafcadb8
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/100048
Tested-by: Satananda Burla <sburla@marvell.com>
Reviewed-by: Satananda Burla <sburla@marvell.com>
---
 drivers/dma/cnxk/cnxk_dmadev.c | 38 ++++++++++++++++++----------------
 1 file changed, 20 insertions(+), 18 deletions(-)

diff --git a/drivers/dma/cnxk/cnxk_dmadev.c b/drivers/dma/cnxk/cnxk_dmadev.c
index 36837783e09d6..aa83018174cff 100644
--- a/drivers/dma/cnxk/cnxk_dmadev.c
+++ b/drivers/dma/cnxk/cnxk_dmadev.c
@@ -74,11 +74,21 @@ cnxk_dmadev_vchan_setup(struct rte_dma_dev *dev, uint16_t vchan,
 		header->cn9k.xtype = DPI_XTYPE_INBOUND;
 		header->cn9k.lport = conf->src_port.pcie.coreid;
 		header->cn9k.fport = 0;
+		header->cn9k.pvfe = conf->src_port.pcie.vfen;
+		if (header->cn9k.pvfe) {
+			header->cn9k.func = conf->src_port.pcie.pfid << 12;
+			header->cn9k.func |= conf->src_port.pcie.vfid;
+		}
 		break;
 	case RTE_DMA_DIR_MEM_TO_DEV:
 		header->cn9k.xtype = DPI_XTYPE_OUTBOUND;
 		header->cn9k.lport = 0;
 		header->cn9k.fport = conf->dst_port.pcie.coreid;
+		header->cn9k.pvfe = conf->dst_port.pcie.vfen;
+		if (header->cn9k.pvfe) {
+			header->cn9k.func = conf->dst_port.pcie.pfid << 12;
+			header->cn9k.func |= conf->dst_port.pcie.vfid;
+		}
 		break;
 	case RTE_DMA_DIR_MEM_TO_MEM:
 		header->cn9k.xtype = DPI_XTYPE_INTERNAL_ONLY;
@@ -93,15 +103,6 @@ cnxk_dmadev_vchan_setup(struct rte_dma_dev *dev, uint16_t vchan,
 		header->cn9k.pvfe = 0;
 	};
 
-	if ((conf->direction == RTE_DMA_DIR_DEV_TO_MEM) ||
-	    (conf->direction == RTE_DMA_DIR_MEM_TO_DEV)) {
-		header->cn9k.pvfe = conf->src_port.pcie.vfen;
-		if (header->cn9k.pvfe) {
-			header->cn9k.func = conf->src_port.pcie.pfid << 12;
-			header->cn9k.func |= conf->src_port.pcie.vfid;
-		}
-	}
-
 	for (i = 0; i < conf->nb_desc; i++) {
 		comp_data = rte_zmalloc(NULL, sizeof(*comp_data), 0);
 		if (comp_data == NULL) {
@@ -137,11 +138,21 @@ cn10k_dmadev_vchan_setup(struct rte_dma_dev *dev, uint16_t vchan,
 		header->cn10k.xtype = DPI_XTYPE_INBOUND;
 		header->cn10k.lport = conf->src_port.pcie.coreid;
 		header->cn10k.fport = 0;
+		header->cn10k.pvfe = conf->src_port.pcie.vfen;
+		if (header->cn10k.pvfe) {
+			header->cn10k.func = conf->src_port.pcie.pfid << 12;
+			header->cn10k.func |= conf->src_port.pcie.vfid;
+		}
 		break;
 	case RTE_DMA_DIR_MEM_TO_DEV:
 		header->cn10k.xtype = DPI_XTYPE_OUTBOUND;
 		header->cn10k.lport = 0;
 		header->cn10k.fport = conf->dst_port.pcie.coreid;
+		header->cn10k.pvfe = conf->dst_port.pcie.vfen;
+		if (header->cn10k.pvfe) {
+			header->cn10k.func = conf->dst_port.pcie.pfid << 12;
+			header->cn10k.func |= conf->dst_port.pcie.vfid;
+		}
 		break;
 	case RTE_DMA_DIR_MEM_TO_MEM:
 		header->cn10k.xtype = DPI_XTYPE_INTERNAL_ONLY;
@@ -156,15 +167,6 @@ cn10k_dmadev_vchan_setup(struct rte_dma_dev *dev, uint16_t vchan,
 		header->cn10k.pvfe = 0;
 	};
 
-	if ((conf->direction == RTE_DMA_DIR_DEV_TO_MEM) ||
-	    (conf->direction == RTE_DMA_DIR_MEM_TO_DEV)) {
-		header->cn10k.pvfe = conf->src_port.pcie.vfen;
-		if (header->cn10k.pvfe) {
-			header->cn10k.func = conf->src_port.pcie.pfid << 12;
-			header->cn10k.func |= conf->src_port.pcie.vfid;
-		}
-	}
-
 	for (i = 0; i < conf->nb_desc; i++) {
 		comp_data = rte_zmalloc(NULL, sizeof(*comp_data), 0);
 		if (comp_data == NULL) {
-- 
2.25.1

