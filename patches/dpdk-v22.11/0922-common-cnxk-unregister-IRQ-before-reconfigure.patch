From a3bbbd49d3b884619cd81e44fa33b46096bb19ff Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Wed, 4 Sep 2024 16:27:57 +0530
Subject: [PATCH 922/955] common/cnxk: unregister IRQ before reconfigure

Unregister SSO device and NPA IRQs before resizing
the IRQs and registering them.

Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Change-Id: I13fc6c5a2ba06f037c81b6a4fd91e9e2c67d7561
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/134924
Base-Builds: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Base-Tests: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Tested-by: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Reviewed-by: Jerin Jacob <jerinj@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/135929
Tested-by: Jerin Jacob <jerinj@marvell.com>
---
 drivers/common/cnxk/roc_dev.c      | 17 ++++++++---------
 drivers/common/cnxk/roc_dev_priv.h |  2 ++
 drivers/common/cnxk/roc_sso.c      |  7 +++++++
 3 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/drivers/common/cnxk/roc_dev.c b/drivers/common/cnxk/roc_dev.c
index d7b94efd6d437..a3f0e0a3bf746 100644
--- a/drivers/common/cnxk/roc_dev.c
+++ b/drivers/common/cnxk/roc_dev.c
@@ -971,8 +971,8 @@ mbox_unregister_vf_irq(struct plt_pci_device *pci_dev, struct dev *dev)
 			   RVU_VF_INT_VEC_MBOX);
 }
 
-static void
-mbox_unregister_irq(struct plt_pci_device *pci_dev, struct dev *dev)
+void
+dev_mbox_unregister_irq(struct plt_pci_device *pci_dev, struct dev *dev)
 {
 	if (dev_is_vf(dev))
 		mbox_unregister_vf_irq(pci_dev, dev);
@@ -1050,8 +1050,8 @@ roc_pf_vf_flr_irq(void *param)
 	}
 }
 
-static int
-vf_flr_unregister_irqs(struct plt_pci_device *pci_dev, struct dev *dev)
+void
+dev_vf_flr_unregister_irqs(struct plt_pci_device *pci_dev, struct dev *dev)
 {
 	struct plt_intr_handle *intr_handle = pci_dev->intr_handle;
 	int i;
@@ -1067,8 +1067,6 @@ vf_flr_unregister_irqs(struct plt_pci_device *pci_dev, struct dev *dev)
 
 	dev_irq_unregister(intr_handle, roc_pf_vf_flr_irq, dev,
 			   RVU_PF_INT_VEC_VFFLR1);
-
-	return 0;
 }
 
 int
@@ -1554,7 +1552,7 @@ dev_init(struct dev *dev, struct plt_pci_device *pci_dev)
 iounmap:
 	dev_vf_mbase_put(pci_dev, vf_mbase);
 mbox_unregister:
-	mbox_unregister_irq(pci_dev, dev);
+	dev_mbox_unregister_irq(pci_dev, dev);
 	if (dev->ops)
 		plt_free(dev->ops);
 mbox_fini:
@@ -1590,10 +1588,11 @@ dev_fini(struct dev *dev, struct plt_pci_device *pci_dev)
 	if (dev->lmt_mz)
 		plt_memzone_free(dev->lmt_mz);
 
-	mbox_unregister_irq(pci_dev, dev);
+	dev_mbox_unregister_irq(pci_dev, dev);
 
 	if (!dev_is_vf(dev))
-		vf_flr_unregister_irqs(pci_dev, dev);
+		dev_vf_flr_unregister_irqs(pci_dev, dev);
+
 	/* Release PF - VF */
 	mbox = &dev->mbox_vfpf;
 	if (mbox->hwbase && mbox->dev)
diff --git a/drivers/common/cnxk/roc_dev_priv.h b/drivers/common/cnxk/roc_dev_priv.h
index 6f7daf3551607..4768170d5c29a 100644
--- a/drivers/common/cnxk/roc_dev_priv.h
+++ b/drivers/common/cnxk/roc_dev_priv.h
@@ -130,6 +130,8 @@ int dev_irqs_disable(struct plt_intr_handle *intr_handle);
 int dev_irq_reconfigure(struct plt_intr_handle *intr_handle, uint16_t max_intr);
 
 int dev_mbox_register_irq(struct plt_pci_device *pci_dev, struct dev *dev);
+void dev_mbox_unregister_irq(struct plt_pci_device *pci_dev, struct dev *dev);
 int dev_vf_flr_register_irqs(struct plt_pci_device *pci_dev, struct dev *dev);
+void dev_vf_flr_unregister_irqs(struct plt_pci_device *pci_dev, struct dev *dev);
 
 #endif /* _ROC_DEV_PRIV_H */
diff --git a/drivers/common/cnxk/roc_sso.c b/drivers/common/cnxk/roc_sso.c
index 6a9c6c671a870..4da58f9ee1511 100644
--- a/drivers/common/cnxk/roc_sso.c
+++ b/drivers/common/cnxk/roc_sso.c
@@ -842,7 +842,14 @@ sso_update_msix_vec_count(struct roc_sso *roc_sso, uint16_t sso_vec_cnt)
 		return dev_irq_reconfigure(pci_dev->intr_handle, mbox_vec_cnt + npa_vec_cnt);
 	}
 
+	/* Before re-configuring unregister irqs */
+	dev_mbox_unregister_irq(pci_dev, dev);
+	if (!dev_is_vf(dev))
+		dev_vf_flr_unregister_irqs(pci_dev, dev);
+
 	npa_vec_cnt = (dev->npa.pci_dev == pci_dev) ? NPA_LF_INT_VEC_POISON + 1 : 0;
+	if (npa_vec_cnt)
+		npa_unregister_irqs(&dev->npa);
 
 	/* Re-configure to include SSO vectors */
 	rc = dev_irq_reconfigure(pci_dev->intr_handle, mbox_vec_cnt + npa_vec_cnt + sso_vec_cnt);
-- 
2.25.1

