From 39d766eaff319b31ae7d656d10a6bd2bd7122fc6 Mon Sep 17 00:00:00 2001
From: Amit Prakash Shukla <amitprakashs@marvell.com>
Date: Tue, 17 Oct 2023 18:05:54 +0530
Subject: [PATCH 644/955] dma/cnxk: fix chunk size for cn9k

cn9k adds 128 bytes to mempool trailer to ensure elements always occupies
odd number of cachelines. This causes the block size to increase beyond max
supported block size by cnxk mempool driver. This patch fixes the same.

Fixes: dedb9e7bddd2 ("dma/cnxk: add higher chunk size support")

Signed-off-by: Amit Prakash Shukla <amitprakashs@marvell.com>
Change-Id: I28c49147e97d60849f307fb4b3a1fbe221d83a73
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/114079
Reviewed-by: Vamsi Krishna Attunuru <vattunuru@marvell.com>
Reviewed-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
Tested-by: Jerin Jacob Kollanukkaran <jerinj@marvell.com>
(cherry picked from commit 500e515a74086db640c65973010d79982c5382d3)
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/114106
Reviewed-by: Devapraba Muthumani <dmuthumani@marvell.com>
Tested-by: Devapraba Muthumani <dmuthumani@marvell.com>
---
 drivers/dma/cnxk/cnxk_dmadev.c | 22 +++++++++++++++++-----
 1 file changed, 17 insertions(+), 5 deletions(-)

diff --git a/drivers/dma/cnxk/cnxk_dmadev.c b/drivers/dma/cnxk/cnxk_dmadev.c
index d171eb677b4aa..6c030ad5b3e18 100644
--- a/drivers/dma/cnxk/cnxk_dmadev.c
+++ b/drivers/dma/cnxk/cnxk_dmadev.c
@@ -255,6 +255,7 @@ cnxk_dmadev_start(struct rte_dma_dev *dev)
 	struct cnxk_dpi_vf_s *dpivf = dev->fp_obj->dev_private;
 	struct cnxk_dpi_conf *dpi_conf;
 	uint32_t chunks, nb_desc = 0;
+	uint32_t queue_buf_sz;
 	int i, j, rc = 0;
 	void *chunk;
 
@@ -274,8 +275,20 @@ cnxk_dmadev_start(struct rte_dma_dev *dev)
 		dpi_conf->completed_offset = 0;
 	}
 
-	chunks = CNXK_DPI_CHUNKS_FROM_DESC(CNXK_DPI_QUEUE_BUF_SIZE_V2, nb_desc);
-	rc = cnxk_dmadev_chunk_pool_create(dev, chunks, CNXK_DPI_QUEUE_BUF_SIZE_V2);
+	queue_buf_sz = CNXK_DPI_QUEUE_BUF_SIZE_V2;
+	/* Max block size allowed by cnxk mempool driver is (128 * 1024).
+	 * Block size = elt_size + mp->header + mp->trailer.
+	 *
+	 * Note from cn9k mempool driver:
+	 * In cn9k additional padding of 128 bytes is added to mempool->trailer to
+	 * ensure that the element size always occupies odd number of cachelines
+	 * to ensure even distribution of elements among L1D cache sets.
+	 */
+	if (!roc_model_is_cn10k())
+		queue_buf_sz = CNXK_DPI_QUEUE_BUF_SIZE_V2 - 128;
+
+	chunks = CNXK_DPI_CHUNKS_FROM_DESC(queue_buf_sz, nb_desc);
+	rc = cnxk_dmadev_chunk_pool_create(dev, chunks, queue_buf_sz);
 	if (rc < 0) {
 		plt_err("DMA pool configure failed err = %d", rc);
 		goto error;
@@ -288,14 +301,13 @@ cnxk_dmadev_start(struct rte_dma_dev *dev)
 		goto error;
 	}
 
-	rc = roc_dpi_configure_v2(&dpivf->rdpi, CNXK_DPI_QUEUE_BUF_SIZE_V2, dpivf->aura,
-				  (uint64_t)chunk);
+	rc = roc_dpi_configure_v2(&dpivf->rdpi, queue_buf_sz, dpivf->aura, (uint64_t)chunk);
 	if (rc < 0) {
 		plt_err("DMA configure v2 failed err = %d", rc);
 		rte_mempool_free(dpivf->chunk_pool);
 		goto open_v1;
 	}
-	dpivf->chunk_size_m1 = (CNXK_DPI_QUEUE_BUF_SIZE_V2 >> 3) - 2;
+	dpivf->chunk_size_m1 = (queue_buf_sz >> 3) - 2;
 	goto done;
 
 open_v1:
-- 
2.25.1

