From b27f60890e2a9a847d576d7b1b931b69bebcd3f4 Mon Sep 17 00:00:00 2001
From: Sathesh Edara <sedara@marvell.com>
Date: Mon, 2 Jan 2023 06:15:04 -0800
Subject: [PATCH 142/955] net/octeon_ep: add support to get MAC address

Add support to get VF MAC address from PF driver
via VF-PF mailbox.

Signed-off-by: Sathesh Edara <sedara@marvell.com>
Change-Id: Iabd9899e2eee208211a8caf34c3cddd211f6d4f6
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/93513
Tested-by: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Reviewed-by: Veerasenareddy Burru <vburru@marvell.com>
---
 drivers/net/octeon_ep/otx_ep_common.h |  2 +-
 drivers/net/octeon_ep/otx_ep_ethdev.c | 38 ++++++++++++++++++++++-----
 2 files changed, 32 insertions(+), 8 deletions(-)

diff --git a/drivers/net/octeon_ep/otx_ep_common.h b/drivers/net/octeon_ep/otx_ep_common.h
index cffd320e43e6d..005243aa23f82 100644
--- a/drivers/net/octeon_ep/otx_ep_common.h
+++ b/drivers/net/octeon_ep/otx_ep_common.h
@@ -431,6 +431,7 @@ struct otx_ep_config {
 typedef enum {
 	OTX_VF_MBOX_CMD_SET_MTU,
 	OTX_VF_MBOX_CMD_SET_MAC_ADDR,
+	OTX_VF_MBOX_CMD_GET_MAC_ADDR,
 	OTX_VF_MBOX_CMD_START_QUEUE,
 	OTX_VF_MBOX_CMD_STOP_QUEUE,
 	OTX_VF_MBOX_CMD_GET_LINK,
@@ -506,7 +507,6 @@ typedef enum {
 
 typedef enum {
 	OTX_VF_LINK_SPEED_NONE,
-	OTX_VF_LINK_SPEED_10,
 	OTX_VF_LINK_SPEED_100,
 	OTX_VF_LINK_SPEED_1000,
 	OTX_VF_LINK_SPEED_2500,
diff --git a/drivers/net/octeon_ep/otx_ep_ethdev.c b/drivers/net/octeon_ep/otx_ep_ethdev.c
index bf7f659482a6e..eeafcfed64810 100644
--- a/drivers/net/octeon_ep/otx_ep_ethdev.c
+++ b/drivers/net/octeon_ep/otx_ep_ethdev.c
@@ -17,6 +17,9 @@
 
 #define OTX_EP_DEV(_eth_dev) \
 	((struct otx_ep_device *)(_eth_dev)->data->dev_private)
+int
+otx_ep_dev_get_mac_addr(struct rte_eth_dev *eth_dev,
+			struct rte_ether_addr *mac_addr);
 
 static const struct rte_eth_desc_lim otx_ep_rx_desc_lim = {
 	.nb_max		= OTX_EP_MAX_OQ_DESCRIPTORS,
@@ -108,13 +111,10 @@ otx_ep_dev_link_update(struct rte_eth_dev *eth_dev,
 			    RTE_ETH_LINK_FULL_DUPLEX;
 	link.link_autoneg = (rsp.s_get_link.autoneg ==
 			     OTX_VF_LINK_AUTONEG) ?
-				RTE_ETH_LINK_AUTONEG :
-				RTE_ETH_LINK_FIXED;
+			     RTE_ETH_LINK_AUTONEG :
+			     RTE_ETH_LINK_FIXED;
 
 	switch (rsp.s_get_link.link_speed) {
-	case OTX_VF_LINK_SPEED_10:
-		link.link_speed = RTE_ETH_SPEED_NUM_10M;
-		break;
 	case OTX_VF_LINK_SPEED_100:
 		link.link_speed = RTE_ETH_SPEED_NUM_100M;
 		break;
@@ -147,7 +147,7 @@ otx_ep_dev_link_update(struct rte_eth_dev *eth_dev,
 		break;
 	default:
 		link.link_speed = RTE_ETH_SPEED_NUM_NONE;
-		break;
+		otx_ep_err("Link speed none\n");
 	}
 	otx_ep_dbg("link status resp link %d duplex %d autoneg %d link_speed %d\n",
 		   link.link_status, link.link_duplex, link.link_autoneg, link.link_speed);
@@ -348,6 +348,31 @@ otx_ep_dev_set_default_mac_addr(struct rte_eth_dev *eth_dev,
 	return 0;
 }
 
+int
+otx_ep_dev_get_mac_addr(struct rte_eth_dev *eth_dev,
+			struct rte_ether_addr *mac_addr)
+{
+	struct otx_ep_device *otx_epvf = OTX_EP_DEV(eth_dev);
+	union otx_vf_mbox_word cmd;
+	union otx_vf_mbox_word rsp;
+	int i, ret;
+
+	cmd.u64 = 0;
+	cmd.s_set_mac.opcode = OTX_VF_MBOX_CMD_GET_MAC_ADDR;
+	ret = otx_ep_send_mbox_cmd(otx_epvf, cmd, &rsp);
+	if (ret)
+		return ret;
+	if (rsp.s_set_mac.type != OTX_VF_MBOX_TYPE_RSP_ACK)
+		return -EINVAL;
+	for (i = 0; i < RTE_ETHER_ADDR_LEN; i++)
+		mac_addr->addr_bytes[i] = rsp.s_set_mac.mac_addr[i];
+	otx_ep_dbg("mac addr  get  success addr %02x:%02x:%02x:%02x:%02x:%02x\n",
+		  mac_addr->addr_bytes[0], mac_addr->addr_bytes[1],
+		  mac_addr->addr_bytes[2], mac_addr->addr_bytes[3],
+		  mac_addr->addr_bytes[4], mac_addr->addr_bytes[5]);
+	return 0;
+}
+
 static int
 otx_ep_dev_start(struct rte_eth_dev *eth_dev)
 {
@@ -929,7 +954,6 @@ otx_ep_eth_dev_init(struct rte_eth_dev *eth_dev)
 	}
 	if (otx_ep_dev_set_default_mac_addr(eth_dev,
 				(struct rte_ether_addr *)&vf_mac_addr)) {
-
 		otx_ep_err("set mac addr failed\n");
 		return -ENODEV;
 	}
-- 
2.25.1

