From 2f51ce32b64422ff70639825d2ea4e8e751167b3 Mon Sep 17 00:00:00 2001
From: Pavan Nikhilesh <pbhagavatula@marvell.com>
Date: Fri, 16 Feb 2024 16:23:00 +0530
Subject: [PATCH 221/513] dma/cnxk: sync up ROC changes

Sync up ROC changes.

Signed-off-by: Pavan Nikhilesh <pbhagavatula@marvell.com>
Change-Id: I5eaad4b59ccfa4d2d5194acf3d3a9ed2f946363c
Reviewed-on: https://sj1git1.cavium.com/c/IP/SW/dataplane/dpdk/+/122080
Base-Builds: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Base-Tests: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Tested-by: sa_ip-toolkits-Jenkins <sa_ip-toolkits-jenkins@marvell.com>
Reviewed-by: Jerin Jacob <jerinj@marvell.com>
---
 drivers/common/cnxk/hw/dpi.h    |  4 +-
 drivers/common/cnxk/roc_dpi.c   | 76 +++++++++++++++++++++++++++++++--
 drivers/common/cnxk/roc_dpi.h   |  1 +
 drivers/common/cnxk/version.map |  1 +
 4 files changed, 76 insertions(+), 6 deletions(-)

diff --git a/drivers/common/cnxk/hw/dpi.h b/drivers/common/cnxk/hw/dpi.h
index a34713dde6f84..8ec981472dc61 100644
--- a/drivers/common/cnxk/hw/dpi.h
+++ b/drivers/common/cnxk/hw/dpi.h
@@ -61,7 +61,7 @@
  */
 union dpi_instr_hdr_s {
 	uint64_t u[4];
-	struct dpi_cn9k_instr_hdr_s_s {
+	struct dpi_cn9k_instr_hdr_s {
 		uint64_t tag : 32;
 		uint64_t tt : 2;
 		uint64_t grp : 10;
@@ -95,7 +95,7 @@ union dpi_instr_hdr_s {
 		/* Word 3 - End */
 	} cn9k;
 
-	struct dpi_cn10k_instr_hdr_s_s {
+	struct dpi_cn10k_instr_hdr_s {
 		uint64_t nfst : 4;
 		uint64_t reserved_4_5 : 2;
 		uint64_t nlst : 4;
diff --git a/drivers/common/cnxk/roc_dpi.c b/drivers/common/cnxk/roc_dpi.c
index 90138fbabd255..92a618b4b8e43 100644
--- a/drivers/common/cnxk/roc_dpi.c
+++ b/drivers/common/cnxk/roc_dpi.c
@@ -6,10 +6,24 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <stdarg.h>
 
 #include "roc_api.h"
 #include "roc_priv.h"
 
+static inline void
+dpi_dump(FILE *file, const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	if (file == NULL)
+		vfprintf(stdout, fmt, args);
+	else
+		vfprintf(file, fmt, args);
+	va_end(args);
+}
+
 #define DPI_PF_MBOX_SYSFS_ENTRY "dpi_device_config"
 
 static inline int
@@ -38,6 +52,32 @@ send_msg_to_pf(struct plt_pci_addr *pci_addr, const char *value, int size)
 	return 0;
 }
 
+static inline int
+recv_msg_from_pf(struct plt_pci_addr *pci_addr, char *value, int size)
+{
+	char buf[255] = {0};
+	int res, fd;
+
+	res = snprintf(
+		buf, sizeof(buf), "/sys/bus/pci/devices/" PCI_PRI_FMT "/%s",
+		pci_addr->domain, pci_addr->bus, DPI_PF_DBDF_DEVICE & 0x7,
+		DPI_PF_DBDF_FUNCTION & 0x7, DPI_PF_MBOX_SYSFS_ENTRY);
+
+	if ((res < 0) || ((size_t)res > sizeof(buf)))
+		return -ERANGE;
+
+	fd = open(buf, O_RDONLY);
+	if (fd < 0)
+		return -EACCES;
+
+	res = read(fd, value, size);
+	close(fd);
+	if (res < 0)
+		return -EACCES;
+
+	return 0;
+}
+
 int
 roc_dpi_enable(struct roc_dpi *dpi)
 {
@@ -125,12 +165,13 @@ roc_dpi_configure_v2(struct roc_dpi *roc_dpi, uint32_t chunk_sz, uint64_t aura,
 	mbox_msg.s.aura = aura;
 	mbox_msg.s.sso_pf_func = idev_sso_pffunc_get();
 	mbox_msg.s.npa_pf_func = idev_npa_pffunc_get();
+	mbox_msg.s.wqecsoff = idev_dma_cs_offset_get();
+	if (mbox_msg.s.wqecsoff)
+		mbox_msg.s.wqecs = 1;
 
-	rc = send_msg_to_pf(&pci_dev->addr, (const char *)&mbox_msg,
-			    sizeof(dpi_mbox_msg_t));
+	rc = send_msg_to_pf(&pci_dev->addr, (const char *)&mbox_msg, sizeof(dpi_mbox_msg_t));
 	if (rc < 0)
-		plt_err("Failed to send mbox message %d to DPI PF, err %d",
-			mbox_msg.s.cmd, rc);
+		plt_err("Failed to send mbox message %d to DPI PF, err %d", mbox_msg.s.cmd, rc);
 
 	return rc;
 }
@@ -174,3 +215,30 @@ roc_dpi_dev_fini(struct roc_dpi *roc_dpi)
 
 	return rc;
 }
+
+void
+roc_dpi_dev_dump(struct roc_dpi *dpi, FILE *file)
+{
+	struct plt_pci_device *pci_dev = dpi->pci_dev;
+	char buff[16384];
+	int rc;
+
+	dpi_dump(file, "VF %d DPI_VDMA_EN     \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_EN));
+	dpi_dump(file, "VF %d DPI_VDMA_DBELL  \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_DBELL));
+	dpi_dump(file, "VF %d DPI_VDMA_SADDR  \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_SADDR));
+	dpi_dump(file, "VF %d DPI_VDMA_COUNTS \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_COUNTS));
+	dpi_dump(file, "VF %d DPI_VDMA_NADDR  \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_NADDR));
+	dpi_dump(file, "VF %d DPI_VDMA_IWBUSY \t0x%" PRIx64 "\n", dpi->vfid,
+		 plt_read64(dpi->rbase + DPI_VDMA_IWBUSY));
+	rc = recv_msg_from_pf(&pci_dev->addr, buff, 16384);
+	if (rc < 0) {
+		plt_err("Failed to receive mbox message from DPI PF, err %d", rc);
+		return;
+	}
+	dpi_dump(file, "%s\n", buff);
+}
diff --git a/drivers/common/cnxk/roc_dpi.h b/drivers/common/cnxk/roc_dpi.h
index 628a71d1a2303..8e4ae21c86ab5 100644
--- a/drivers/common/cnxk/roc_dpi.h
+++ b/drivers/common/cnxk/roc_dpi.h
@@ -13,6 +13,7 @@ struct roc_dpi {
 
 int __roc_api roc_dpi_dev_init(struct roc_dpi *roc_dpi, uint8_t offset);
 int __roc_api roc_dpi_dev_fini(struct roc_dpi *roc_dpi);
+void __roc_api roc_dpi_dev_dump(struct roc_dpi *roc_dpi, FILE *file);
 
 int __roc_api roc_dpi_configure(struct roc_dpi *dpi, uint32_t chunk_sz, uint64_t aura,
 				uint64_t chunk_base);
diff --git a/drivers/common/cnxk/version.map b/drivers/common/cnxk/version.map
index 606d865672664..75f85f4805757 100644
--- a/drivers/common/cnxk/version.map
+++ b/drivers/common/cnxk/version.map
@@ -85,6 +85,7 @@ INTERNAL {
 	roc_dpi_configure_v2;
 	roc_dpi_dev_fini;
 	roc_dpi_dev_init;
+	roc_dpi_dev_dump;
 	roc_dpi_disable;
 	roc_dpi_enable;
 	roc_error_msg_get;
-- 
2.25.1

